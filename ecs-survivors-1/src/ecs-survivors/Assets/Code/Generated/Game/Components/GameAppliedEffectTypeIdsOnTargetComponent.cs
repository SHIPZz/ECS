//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAppliedEffectTypeIdsOnTarget;

    public static Entitas.IMatcher<GameEntity> AppliedEffectTypeIdsOnTarget {
        get {
            if (_matcherAppliedEffectTypeIdsOnTarget == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AppliedEffectTypeIdsOnTarget);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAppliedEffectTypeIdsOnTarget = matcher;
            }

            return _matcherAppliedEffectTypeIdsOnTarget;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Effects.AppliedEffectTypeIdsOnTarget appliedEffectTypeIdsOnTarget { get { return (Code.Gameplay.Features.Effects.AppliedEffectTypeIdsOnTarget)GetComponent(GameComponentsLookup.AppliedEffectTypeIdsOnTarget); } }
    public System.Collections.Generic.List<Code.Gameplay.Features.Effects.EffectTypeId> AppliedEffectTypeIdsOnTarget { get { return appliedEffectTypeIdsOnTarget.Value; } }
    public bool hasAppliedEffectTypeIdsOnTarget { get { return HasComponent(GameComponentsLookup.AppliedEffectTypeIdsOnTarget); } }

    public GameEntity AddAppliedEffectTypeIdsOnTarget(System.Collections.Generic.List<Code.Gameplay.Features.Effects.EffectTypeId> newValue) {
        var index = GameComponentsLookup.AppliedEffectTypeIdsOnTarget;
        var component = (Code.Gameplay.Features.Effects.AppliedEffectTypeIdsOnTarget)CreateComponent(index, typeof(Code.Gameplay.Features.Effects.AppliedEffectTypeIdsOnTarget));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAppliedEffectTypeIdsOnTarget(System.Collections.Generic.List<Code.Gameplay.Features.Effects.EffectTypeId> newValue) {
        var index = GameComponentsLookup.AppliedEffectTypeIdsOnTarget;
        var component = (Code.Gameplay.Features.Effects.AppliedEffectTypeIdsOnTarget)CreateComponent(index, typeof(Code.Gameplay.Features.Effects.AppliedEffectTypeIdsOnTarget));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAppliedEffectTypeIdsOnTarget() {
        RemoveComponent(GameComponentsLookup.AppliedEffectTypeIdsOnTarget);
        return this;
    }
}
