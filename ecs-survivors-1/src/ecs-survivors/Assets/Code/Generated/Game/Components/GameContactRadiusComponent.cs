//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherContactRadius;

    public static Entitas.IMatcher<GameEntity> ContactRadius {
        get {
            if (_matcherContactRadius == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ContactRadius);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherContactRadius = matcher;
            }

            return _matcherContactRadius;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Armament.ContactRadius contactRadius { get { return (Code.Gameplay.Features.Armament.ContactRadius)GetComponent(GameComponentsLookup.ContactRadius); } }
    public float ContactRadius { get { return contactRadius.Value; } }
    public bool hasContactRadius { get { return HasComponent(GameComponentsLookup.ContactRadius); } }

    public GameEntity AddContactRadius(float newValue) {
        var index = GameComponentsLookup.ContactRadius;
        var component = (Code.Gameplay.Features.Armament.ContactRadius)CreateComponent(index, typeof(Code.Gameplay.Features.Armament.ContactRadius));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceContactRadius(float newValue) {
        var index = GameComponentsLookup.ContactRadius;
        var component = (Code.Gameplay.Features.Armament.ContactRadius)CreateComponent(index, typeof(Code.Gameplay.Features.Armament.ContactRadius));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveContactRadius() {
        RemoveComponent(GameComponentsLookup.ContactRadius);
        return this;
    }
}
